<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Coding Notes</title>
    <link>https://pbedn.github.io/post/index.xml</link>
    <description>Recent content in Posts on Coding Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 12 Jul 2017 17:57:03 +0200</lastBuildDate>
    <atom:link href="https://pbedn.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I do not like Django</title>
      <link>https://pbedn.github.io/post/I-do-not-like-django/</link>
      <pubDate>Wed, 12 Jul 2017 17:57:03 +0200</pubDate>
      
      <guid>https://pbedn.github.io/post/I-do-not-like-django/</guid>
      <description>&lt;p&gt;First of all, I do not know why, it is just my feeling. Two years ago I had to build small internal company tool for data administration. That was my first serious web application. I have read about different options, asked about best practices and built &amp;lsquo;hello world apps&amp;rsquo; in flask, django and pyramid. Most advices I got was to use django (best choice for beginners), but it just did not work for me. Two years later I have not stop developing using Flask, my app grown bigger but still does its job quite good, though I have rewritten it twice..&lt;/p&gt;

&lt;p&gt;Having said that, I am learning Django now. The reason is simply current job market in my city. Most Python jobs are Django related. So I am slowly going through official tutorial, and have few other good books waiting to be consumed (see resources at the end of this post).&lt;/p&gt;

&lt;p&gt;Looking on my developer career I feel that is not last choice..&lt;/p&gt;

&lt;p&gt;Ps.&lt;/p&gt;

&lt;p&gt;Flask is finally updating regularly (it was stuck with version 0.11 for years)&lt;/p&gt;

&lt;p&gt;Checkout new &lt;a href=&#34;https://trypyramid.com/&#34;&gt;Pyramid website&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;And &lt;a href=&#34;https://www.youtube.com/watch?v=7kwnjoAJ2HQ&#34;&gt;build your own framework&lt;/a&gt; better than Django/Flask..&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://djangobook.com/&#34;&gt;Tutorial: The Django Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://media.readthedocs.org/pdf/tango-with-django/latest/tango-with-django.pdf&#34;&gt;Book: How to Tango with Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.marinamele.com/taskbuster-django-tutorial&#34;&gt;Tutorial: Taskbuster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://test-driven-django-development.readthedocs.io/en/latest/index.html&#34;&gt;Workshop: Test-Driven Web Development with Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000000754&#34;&gt;Book: Test-Driven Development with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to make automatic deployment with git: fetch and checkout vs pull</title>
      <link>https://pbedn.github.io/post/git-fetch-checkout-pull-playground/</link>
      <pubDate>Wed, 21 Jun 2017 17:24:11 +0200</pubDate>
      
      <guid>https://pbedn.github.io/post/git-fetch-checkout-pull-playground/</guid>
      <description>&lt;p&gt;Can git be used as automatic deploment tool? Some say that as for mvp it is enough. Others give quite good explanations how to do it, see &lt;a href=&#34;http://gitolite.com/deploy.html&#34;&gt;gitolite.com/deploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My first naive solution was to use in deployment script for production, commands:
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout .
$ git pull --ff-only
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works if production repository is clean. But sometimes there are problems with merging, and unless you catch the error, remote deploy script will just give you the message &amp;ldquo;&lt;em&gt;fatal: Not possible to fast-forward, aborting.&lt;/em&gt;&amp;rdquo;, leaving the repository in bad shape.. So what is the proper solution?&lt;/p&gt;

&lt;p&gt;Let say that in production environment &amp;ldquo;&lt;em&gt;git log &amp;ndash;oneline&lt;/em&gt;&amp;rdquo; gives me:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;114dbc5 Some changes
2fe6adb Some changes
e38c033 Added broken file
6f6ba61 Changed Readme
ab6d78a Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In development environment I did a &amp;ldquo;&lt;em&gt;git rebase -i 6f6ba&lt;/em&gt;&amp;rdquo;, squashing last two commits into one, and &amp;ldquo;&lt;em&gt;git push &amp;ndash;force&lt;/em&gt;&amp;rdquo; to repair my master branch. That will give me:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;5e88aca Some changes
e38c033 Added broken file
6f6ba61 Changed Readme
ab6d78a Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My deployment script will run in production and produce output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git pull --ff-only
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/pbedn/git-playground
 + 114dbc5...5e88aca master       -&amp;gt; origin/master  (forced update)
 * [new tag]         after-rebase -&amp;gt; after-rebase
fatal: Not possible to fast-forward, aborting.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a problem. Solution is to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git fetch --all
$ git checkout --force origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commits in the production are now correct!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git fetch --all
Fetching origin

$ git checkout --force origin/master
Note: checking out &#39;origin/master&#39;.

You are in &#39;detached HEAD&#39; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at 5e88aca... Some changes

$ git log --oneline
5e88aca Some changes
e38c033 Added broken file
6f6ba61 Changed Readme
ab6d78a Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you like to play with these exact examples you can follow the steps below (note that we are working with HEAD detached, but for the exercise purpose that is ok):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/pbedn/git-playground
$ git checkout tags/duplicate
$ git pull --ff-only origin master
$ git checkout tags/after-rebase
$ git fetch --all
$ git checkout --force origin/master
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Deploy Python app using PostgreSQL to CircleCI</title>
      <link>https://pbedn.github.io/post/python-postgresql-and-circleci/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pbedn.github.io/post/python-postgresql-and-circleci/</guid>
      <description>&lt;p&gt;Deploying to CircleCI as easy as creating yaml file (sometimes you even do not need it as Circle will automatically recognize structure and behavior). But usually it is better to setup at least basic configuration. The problem begins with more complicated functionality and CI documentation is minimal, or to say &amp;lsquo;very hacker friendly&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;My problem was how to use build-in PostgreSQL database with Python application. This is quick tip how I solved it.
&lt;/p&gt;

&lt;p&gt;I created simple Python app for this post purpose. All files are inside &lt;a href=&#34;https://github.com/pbedn/circleci-1.0-pytest-postgresql&#34;&gt;my repository&lt;/a&gt;, which I connected to Github with version 1.0 of CircleCI.&lt;/p&gt;

&lt;p&gt;CircleCI settings are all default except &lt;em&gt;BUILD SETTINGS: Environment Variables&lt;/em&gt;, where I added variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name: DB_NAME
Value: circleci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create &lt;strong&gt;circle.yml&lt;/strong&gt; file, and put inside root of repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machine:
  timezone:
    Europe/Warsaw
  python:
    version: 3.5.2

  environment:
    DATABASE_URL: postgres://ubuntu:@127.0.0.1:5432/circle_test

dependencies:
  pre:
   - pip install pytest
   - pip install psycopg2

database:
  override:
    - psql -U ubuntu -d circle_test -a -f schema.sql

test:
  override:
    - py.test --junitxml=$CIRCLE_TEST_REPORTS/output.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most time it took me to find correct configuration how to override database, and it turned out to be very simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- psql -U ubuntu -d circle_test -a -f schema.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line deciphered using &lt;a href=&#34;https://www.postgresql.org/docs/9.5/static/app-psql.html&#34;&gt;psql-docs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-U ubuntu: username&lt;/li&gt;
&lt;li&gt;-d circleci: database name&lt;/li&gt;
&lt;li&gt;-a echo all&lt;/li&gt;
&lt;li&gt;-f schema.sql: filename&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look inside my repository at the &lt;a href=&#34;https://github.com/pbedn/circleci-1.0-pytest-postgresql/blob/master/tests/test_database.py&#34;&gt;test_database.py&lt;/a&gt; file. You will find line which says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DATABASE = os.environ[&amp;quot;DB_NAME&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I am using that environmental variable, added in the beginning.&lt;/p&gt;

&lt;p&gt;That is it. Now push to Github, and enjoy having automatic testing. If it still does not work, try to fork &lt;a href=&#34;https://github.com/pbedn/circleci-1.0-pytest-postgresql&#34;&gt;my repo&lt;/a&gt; and play with it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pbedn/circleci-1.0-pytest-postgresql&#34;&gt;My repository with example app and configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/docs/1.0/manually/#databases&#34;&gt;CircleCI documentation about database setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/9.5/static/app-psql.html&#34;&gt;Psql documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Deploy Hugo to Github Pages using Wercker</title>
      <link>https://pbedn.github.io/post/deploy_hugo_to_gh_using_wercker/</link>
      <pubDate>Fri, 17 Mar 2017 08:25:40 +0100</pubDate>
      
      <guid>https://pbedn.github.io/post/deploy_hugo_to_gh_using_wercker/</guid>
      <description>&lt;p&gt;The easiest solution how to publish with Hugo to Github Pages is to have two separate repositories, one with blog source files and second with html files. Simple.&lt;/p&gt;

&lt;p&gt;We can push files from both repositories manually or can do better. Push just source content and leave the rest for automatic deployment.

I did not know about Wercker until read &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;automated deployment tutorial&lt;/a&gt; on Hugo site. And with hint from &lt;a href=&#34;http://skarlso.github.io/2016/02/10/hugo-autodeploy-with-wercker/&#34;&gt;Skarlso post&lt;/a&gt;, that process became so easy.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create new application on Wercker with Hugo source repository. Leave the recommended settings.&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;Workflows&lt;/em&gt; add new &lt;em&gt;Pipeline&lt;/em&gt; with both names set to &lt;em&gt;deploy&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Create new &lt;em&gt;Personal access token&lt;/em&gt; on Github, and copy its value to Wercker &lt;em&gt;Environment&lt;/em&gt;, with key name: &lt;em&gt;GIT_TOKEN&lt;/em&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add &lt;em&gt;wercker.yml&lt;/em&gt; to your Hugo source repository. Just change your Github name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: golang
build:
    steps:
        - arjen/hugo-build:
            version: &amp;quot;0.19&amp;quot;
deploy:
    steps:
        - install-packages:
            packages: git ssh-client
        - leipert/git-push:
            gh_oauth: $GIT_TOKEN
            repo: &amp;lt;name&amp;gt;/&amp;lt;name&amp;gt;.github.io
            branch: master
            basedir: public

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push and enjoy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that in &lt;em&gt;arjen/hugo-build&lt;/em&gt; I do not use &lt;em&gt;theme&lt;/em&gt; option, I have all layouts and static files in my &lt;a href=&#34;https://github.com/pbedn/hugo-blog&#34;&gt;hugo-blog&lt;/a&gt;. For more info go to &lt;a href=&#34;https://github.com/ArjenSchwarz/wercker-step-hugo-build&#34;&gt;arjen docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World with Hugo</title>
      <link>https://pbedn.github.io/post/start/</link>
      <pubDate>Mon, 13 Mar 2017 11:50:42 +0100</pubDate>
      
      <guid>https://pbedn.github.io/post/start/</guid>
      <description>&lt;p&gt;While trying to make this little space in the web finally working, I set up dozens of different static site generators (Jekyll, Pelican, Nikola, Lektor, Sculpin..). I was even thinking about writing my own for some time. I tried wordpress and blogspot. But finally arrived at &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and it make my day much better.
&lt;/p&gt;

&lt;p&gt;Why I like it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice working on Windows (one &amp;lsquo;.exe&amp;rsquo; file)&lt;/li&gt;
&lt;li&gt;Good documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some things that could be better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better deployment to Github Pages&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;quick-tips&#34;&gt;Quick tips:&lt;/h3&gt;

&lt;p&gt;After some fight to publish it nicely to Github Pages, I tried to use automate deployment (Wecker tutorial on Hugo website doesn&amp;rsquo;t work out of the box, and my knowledge on CI is not good yet). Finally I settled easiest solution - having two repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First repository is &amp;lsquo;User Page&amp;rsquo; - &amp;lsquo;pbedn.github.io&amp;rsquo;. Please refer to &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;pages docs&lt;/a&gt; about more info.&lt;/li&gt;
&lt;li&gt;Second is with source content of hugo - &amp;lsquo;hugo-blog&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to maintain pushing to two repositories? I use GitKraken, so it is just few clicks. Additonaly I am all the time inside &amp;lsquo;hugo-blog&amp;rsquo; directory.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When I create new content I run command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo serve -w -D
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When I want to push to github, firstly I create html files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -d ../pbedn.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And use GitKraken.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;what-if-after-running-hugo-serve-i-do-not-see-anytinng-in-the-public-directory&#34;&gt;What if after running hugo serve I do not see anytinng in the &lt;em&gt;public&lt;/em&gt; directory?&lt;/h4&gt;

&lt;p&gt;Sometimes it helps to run hugo with &amp;lsquo;-v&amp;rsquo;, it shows more verbose output. My solution was to copy theme files inside my main folder (sometimes you just have to copy static files).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>